
namespace DeployClient;

public struct JobItemInfo
{
    ALittle.DisplayObject item;
    DeployServer.D_JobInfo info;

    ALittle.DisplayObject _button;
    ALittle.DisplayObject _status;
}

public struct BuildItemInfo
{
    ALittle.DisplayObject item;
    DeployServer.D_BuildInfo info;

    ALittle.DisplayObject _button;
    ALittle.DisplayObject _download_button;
}

public class DPLUITaskDetail : ALittle.DisplayLayout
{
    private TaskItemInfo _task_item;
    private ALittle.TextRadioButtonGroup _job_group = new ALittle.TextRadioButtonGroup();
    private ALittle.TextRadioButtonGroup _build_group = new ALittle.TextRadioButtonGroup();

    private ALittle.DisplayObject _task_name_input;
    private ALittle.DisplayObject _task_desc_input;
    private ALittle.DisplayObject _webhook_input;
    private ALittle.DisplayObject _save_button;

    private ALittle.DisplayObject _task_timer_none_radio;
    private ALittle.DisplayObject _task_timer_interval_radio;
    private ALittle.DisplayObject _task_timer_point_radio;

    private ALittle.DisplayObject _task_timer_interval_input;
    private ALittle.DisplayObject _task_timer_interval_unit_dropdown;
    private ALittle.DisplayObject _task_timer_year_point_input;
    private ALittle.DisplayObject _task_timer_month_point_input;
    private ALittle.DisplayObject _task_timer_day_point_input;
    private ALittle.DisplayObject _task_timer_hour_point_input;
    private ALittle.DisplayObject _task_timer_minute_point_input;
    private ALittle.DisplayObject _task_timer_second_point_input;
    private ALittle.DisplayObject _task_timer_error_text; // 定时器时间错误信息

    private ALittle.ScrollList _job_list;
    private ALittle.ScrollList _build_list;

    public fun TCtor()
    {
        var timer_group = new ALittle.TextRadioButtonGroup();
        this._task_timer_none_radio.group = timer_group;
        this._task_timer_interval_radio.group = timer_group;
        this._task_timer_point_radio.group = timer_group;
    }

    public fun Init(TaskItemInfo task_item)
    {
        this._task_item = task_item;
        this.UpdateTaskInfo();
        this.RefreshJobInfo();
        this.RefreshBuildInfo();
    }

    public fun Show()
    {
        this.visible = true;

        if (!this._save_button.disabled)
            this.UpdateTaskInfo();
    }

    public fun Hide()
    {
        this.visible = false;
    }

    public fun UpdateTaskInfo()
    {
        this._save_button.disabled = true;
        this._task_name_input.text = this._task_item.info.task_name;
        this._task_desc_input.text = this._task_item.info.task_desc;
        this._webhook_input.text = ALittle.String_Join(this._task_item.info.web_hook, "\n");

        var timer = this._task_item.info.timer;
        // 初始化数据
        if (timer.type == null) timer.type = DeployServer.TaskTimerType.NONE;
        if (timer.interval == null) timer.interval = 0;
        if (timer.year_point == null) timer.year_point = 0;
        if (timer.month_point == null) timer.month_point = 0;
        if (timer.day_point == null) timer.day_point = 0;
        if (timer.hour_point == null) timer.hour_point = 0;
        if (timer.minute_point == null) timer.minute_point = 0;
        if (timer.second_point == null) timer.second_point = 0;

        if (this._task_item.info.timer.type == DeployServer.TaskTimerType.INTERVAL)
        	this._task_timer_interval_radio.selected = true;
        elseif (this._task_item.info.timer.type == DeployServer.TaskTimerType.POINT)
        	this._task_timer_point_radio.selected = true;
        else
        	this._task_timer_none_radio.selected = true;

        if (this._task_item.info.timer.interval % (3600 * 24) == 0)
        {
        	this._task_timer_interval_input.text = ALittle.Math_Floor(this._task_item.info.timer.interval / (3600 * 24));
            this._task_timer_interval_unit_dropdown.text = "天";
        }
        elseif (this._task_item.info.timer.interval % 3600 == 0)
        {
        	this._task_timer_interval_input.text = ALittle.Math_Floor(this._task_item.info.timer.interval / 3600);
            this._task_timer_interval_unit_dropdown.text = "小时";
        }
        elseif (this._task_item.info.timer.interval % 60 == 0)
        {
        	this._task_timer_interval_input.text = ALittle.Math_Floor(this._task_item.info.timer.interval / 60);
            this._task_timer_interval_unit_dropdown.text = "分钟";
        }
        else
        {
        	this._task_timer_interval_input.text = this._task_item.info.timer.interval;
            this._task_timer_interval_unit_dropdown.text = "秒";
        }

        this._task_timer_second_point_input.text = this._task_item.info.timer.second_point;
        this._task_timer_minute_point_input.text = this._task_item.info.timer.minute_point;
        this._task_timer_hour_point_input.text = this._task_item.info.timer.hour_point;
        this._task_timer_day_point_input.text = this._task_item.info.timer.day_point;
        this._task_timer_month_point_input.text = this._task_item.info.timer.month_point;
        this._task_timer_year_point_input.text = this._task_item.info.timer.year_point;

        var result, text = this.CheckTimerError();
        this._task_timer_error_text.text = text;
    }

    private fun CheckTimerError() : bool, string
    {
        if (this._task_timer_interval_radio.selected)
        {
            var interval = ALittle.Math_ToInt(this._task_timer_interval_input.text);
            if (interval == null || interval < 0)
                return false, "间隔时间错误：请填写大于0的间隔时间";
            return true, "任务将在每"..interval..this._task_timer_interval_unit_dropdown.text.."自动执行一次";
        }

        if (this._task_timer_point_radio.selected)
        {
            // 判断小时参数
            var hour_point = ALittle.Math_ToInt(this._task_timer_hour_point_input.text);
            if (hour_point == null || hour_point < 0 || hour_point > 23)
                return false, "定时时间错误：小时数取值范围在[0,23]";
            // 判断分钟参数
            var minute_point = ALittle.Math_ToInt(this._task_timer_minute_point_input.text);
            if (minute_point == null || minute_point < 0 || minute_point > 59)
                return false, "定时时间错误：分钟数取值范围在[0,59]";
            // 判断秒数参数
            var second_point = ALittle.Math_ToInt(this._task_timer_second_point_input.text);
            if (second_point == null || second_point < 0 || second_point > 59)
                return false, "定时时间错误：秒数取值范围在[0,59]";
            var day_text = hour_point.."时 "..minute_point.."分 "..second_point.."秒";

            var year_point = ALittle.Math_ToInt(this._task_timer_year_point_input.text);
            // 确定了年份，那么就确定了未来的一个时间点
            if (year_point != null && year_point > 0)
            {
                // 判断月份参数
                var month_point = ALittle.Math_ToInt(this._task_timer_month_point_input.text);
                if (month_point == null || month_point < 1 || month_point > 12)
                    return false, "定时时间错误：在确定"..year_point.."年的情况下，月份取值范围在[1,12]";
                // 判断天数
                var day_count = ALittle.Time_GetMonthDayCount(year_point, month_point);
                var day_point = ALittle.Math_ToInt(this._task_timer_day_point_input.text);
                if (day_point == null || day_point < 1 || day_point > day_count)
                    return false, "定时时间错误：在确定"..year_point.."年"..month_point.."月的情况下，日期取值范围在[1,"..day_count.."]";

                return true, "定时间为:"..year_point.."年 "..month_point.."月 "..day_point.."日 "..day_text.." 执行一次";
            }

            // 获取当前时间和年份
            var cur_time = ALittle.Time_GetCurTime();
            var cur_year = ALittle.Time_GetYear(cur_time);

            // 确定了月份
            var month_point = ALittle.Math_ToInt(this._task_timer_month_point_input.text);
            if (month_point != null && month_point > 0)
            {
                var day_point = ALittle.Math_ToInt(this._task_timer_day_point_input.text);
                if (day_point == null || day_point < 1 || day_point > 31)
                    return false, "定时时间错误：在确定"..month_point.."月的情况下，日期取值范围在[1,31]";
                if ((day_point == null || day_point < 1 || day_point > 31) && (month_point == 1 || month_point == 3 || month_point == 5 || month_point == 7 || month_point == 8 || month_point == 10 || month_point == 12))
                	return false, "定时时间错误：在确定"..month_point.."月的情况下，日期取值范围在[1,31]";
                if ((day_point == null || day_point < 1 || day_point > 30) && (month_point == 4 || month_point == 6 || month_point == 9 || month_point == 11))
                	return false, "定时时间错误：在确定"..month_point.."月的情况下，日期取值范围在[1,30]";
                if ((day_point == null || day_point < 1 || day_point > 29) && month_point == 2)
                    return false, "定时时间错误：在确定"..month_point.."月的情况下，日期取值范围在[1,29]";
                var ext_text = "";
                if (day_point == 29 && month_point == 2) ext_text = "(如果"..month_point.."月没有"..day_point.."日则跳过)";
                return true, "定时间为:每年"..month_point.."月 "..day_point.."日 "..day_text.." 执行一次"..ext_text;
            }

            // 确定了日期
            var day_point = ALittle.Math_ToInt(this._task_timer_day_point_input.text);
            if (day_point != null && day_point > 0)
            {
                if (day_point > 31) return false, "定时时间错误：日期取值范围最多在[1,31]";
                var ext_text = "";
                if (day_point >= 29) ext_text = "(如果当月没有"..day_point.."日则跳过)";
                return true, "定时间为:每月 "..day_point.."日 "..day_text.." 执行一次"..ext_text;
            }

            return true, "定时间为:每天 "..day_text.." 执行一次";
        }

        return true, "关闭定时";
    }

    private fun HandleUpdateErrorText(ALittle.UIChangedEvent event)
    {
        var result, text = this.CheckTimerError();
        this._task_timer_error_text.text = text;
        this._save_button.disabled = false;
    }

    public fun UpdateJobInfo(int index)
    {
        var job_info = this._task_item.info.job_list[index];
        if (job_info == null) return;

        var job_item = cast<JobItemInfo>(this._job_list.childs[index]._user_data);
        job_item.info = job_info;
        this.RefreshJobItem(job_item);
    }

    public fun RemoveJobItem(int index)
    {
        var job_info = this._task_item.info.job_list[index];
        if (job_info == null) return;

        this._job_list.SpliceChild(index, 1);
    }

    public fun MoveJobItem(int index, int target_index)
    {
        var job_info = this._task_item.info.job_list[index];
        if (job_info == null) return;

        this._job_list.SetChildIndex(this._job_list.GetChildByIndex(index), target_index);
    }

    public fun RemoveBuildItem(int create_time, int create_index)
    {
        for (var index, build_info in this._task_item.info.build_list)
        {
            if (build_info.create_time == create_time && build_info.create_index == create_index)
            {
                this._build_list.SpliceChild(index, 1);
                break;
            }
        }
    }

    private fun RefreshJobInfo()
    {
        this._job_list.RemoveAllChild();
        for (var index, job_info in this._task_item.info.job_list)
            this.AddJobItem(null, job_info);
    }

    private fun RefreshBuildInfo()
    {
        this._build_list.RemoveAllChild();
        for (var index, build_info in this._task_item.info.build_list)
            this.AddBuildItem(build_info);
    }

    private fun HandleTaskBaseChanged(ALittle.UIChangedEvent event)
    {
        this._save_button.disabled = false;
    }

    public fun HandleTaskStart()
    {
        for (var index, child in this._job_list.childs)
        {
            var job_item = cast<JobItemInfo>(child._user_data);
            job_item._status.text = "-";
        }
    }

    private async fun HandleTaskSaveClick(ALittle.UIClickEvent event)
    {
        var msg_client = g_DPLWebLoginManager.msg_client;
        if (msg_client == null || !msg_client.IsConnected())
        {
            g_AUITool.ShowNotice("提示", "当前还未连接成功!");
            return;
        }

        if (this._task_name_input.text == "")
        {
            g_AUITool.ShowNotice("提示", "任务名称不能为空!");
            return;
        }

        var msg = new DeployServer.C2SUpdateTaskInfo();
        msg.task_id = this._task_item.info.task_id;
        msg.task_name = this._task_name_input.text;
        msg.task_desc = this._task_desc_input.text;
        msg.web_hook = ALittle.String_SplitSepList(this._webhook_input.text, ["\r", "\n"]);
        msg.timer = new DeployServer.TaskTimer();

        if (this._task_timer_interval_radio.selected) msg.timer.type = DeployServer.TaskTimerType.INTERVAL;
        elseif (this._task_timer_point_radio.selected) msg.timer.type = DeployServer.TaskTimerType.POINT;
        else msg.timer.type = DeployServer.TaskTimerType.NONE;

        msg.timer.interval = ALittle.Math_ToInt(this._task_timer_interval_input.text);
        if (msg.timer.interval != null)
        {
            if (this._task_timer_interval_unit_dropdown.text == "天") msg.timer.interval *= 3600 * 24;
            elseif (this._task_timer_interval_unit_dropdown.text == "小时") msg.timer.interval *= 3600;
            elseif (this._task_timer_interval_unit_dropdown.text == "分钟") msg.timer.interval *= 60;
        }

        msg.timer.second_point = ALittle.Math_ToInt(this._task_timer_second_point_input.text);
        msg.timer.minute_point = ALittle.Math_ToInt(this._task_timer_minute_point_input.text);
        msg.timer.hour_point = ALittle.Math_ToInt(this._task_timer_hour_point_input.text);
        msg.timer.day_point = ALittle.Math_ToInt(this._task_timer_day_point_input.text);
        msg.timer.month_point = ALittle.Math_ToInt(this._task_timer_month_point_input.text);
        msg.timer.year_point = ALittle.Math_ToInt(this._task_timer_year_point_input.text);

        var error = DeployServer.HandleC2SUpdateTaskInfo(msg_client, msg);
        if (error != null) g_AUITool.ShowNotice("提示", error);
    }

    private fun HandleNewJobClick(ALittle.UIClickEvent event)
    {
        this.ShowCreateMenu(null);
    }

    public fun ShowCreateMenu(int job_index)
    {
        var menu = new AUIPlugin.AUIRightMenu();
        menu.AddItem("批处理", bind(this.HandleNewCommonJob, this, "batch_job_dialog", job_index));
        menu.AddItem("复制目录", bind(this.HandleNewCommonJob, this, "deepcopy_job_dialog", job_index));
        menu.AddItem("复制文件", bind(this.HandleNewCommonJob, this, "copyfile_job_dialog", job_index));
        menu.AddItem("发送命令", bind(this.HandleNewCommonJob, this, "sendvirtualkey_job_dialog", job_index));
        menu.AddItem("等待进程退出", bind(this.HandleNewCommonJob, this, "waitprocessexit_job_dialog", job_index));
        menu.AddItem("创建进程", bind(this.HandleNewCommonJob, this, "createprocess_job_dialog", job_index));
        menu.AddItem("监视进程", bind(this.HandleNewCommonJob, this, "monitorprocess_job_dialog", job_index));
        menu.AddItem("杀死进程", bind(this.HandleNewCommonJob, this, "killprocess_job_dialog", job_index));
        menu.AddItem("代码检查", bind(this.HandleNewCommonJob, this, "resharper_redmine_job_dialog", job_index));
        menu.AddItem("IGGChat群通知", bind(this.HandleNewCommonJob, this, "igg_chat_job_dialog", job_index));
        menu.Show();
    }

    private fun HandleStartTaskClick(ALittle.UIClickEvent event)
    {
        g_DPLCenter.center.task_center.HandleStartTask(this._task_item);
    }

    private fun HandleNewCommonJob(string ui, int job_index)
    {
        var dialog = g_Control.CreateControl{CommonJobDialog}(ui);
        dialog.Show(this._task_item.info.task_id, job_index, null);
    }

    public fun AddJobItem(int job_index, DeployServer.D_JobInfo job_info)
    {
        var job_item = new JobItemInfo();
        job_item.info = job_info;
        job_item.item = g_Control.CreateControl{ALittle.DisplayObject}("dpl_job_item", job_item);
        job_item.item._user_data = job_item;
        job_item._button._user_data = job_item;
        job_item._button.group = this._job_group;
        job_item._button.AddEventListener(this, this.HandleJobRButtonDown);
        this._job_list.AddChild(job_item.item, job_index);

        this.RefreshJobItem(job_item);
    }

    public fun AddBuildItem(DeployServer.D_BuildInfo build_info)
    {
        var build_item = new BuildItemInfo();
        build_item.info = build_info;
        build_item.item = g_Control.CreateControl{ALittle.DisplayObject}("dpl_build_item", build_item);
        build_item.item._user_data = build_item;
        build_item._button._user_data = build_item;
        build_item._button.group = this._build_group;
        build_item._button.AddEventListener(this, this.HandleBuildRButtonDown);
        build_item._button.AddEventListener(this, this.HandlePreSeeBuild);
        build_item._download_button.AddEventListener(this, this.HandleDownloadBuild);
        build_item._download_button._user_data = build_item;
        this._build_list.AddChild(build_item.item);
        this._build_list.ScrollToBottom();

        build_item._button.text = ALittle.Time_GetCurDate(build_info.create_time);
    }

    private fun RefreshJobItem(JobItemInfo job_item)
    {
        if (job_item.info.job_type == DeployServer.JobType.BATCH)
        	job_item._button.text = "[批处理] "..job_item.info.job_name..":"..job_item.info.detail.batch_cmd;
        elseif (job_item.info.job_type == DeployServer.JobType.DEEPCOPY)
        	job_item._button.text = "[复制目录] "..job_item.info.job_name..":"..job_item.info.detail.deepcopy_src.."->"..job_item.info.detail.deepcopy_dst;
        elseif (job_item.info.job_type == DeployServer.JobType.COPYFILE)
        	job_item._button.text = "[复制文件] "..job_item.info.job_name..":"..job_item.info.detail.copyfile_src.."->"..job_item.info.detail.copyfile_dst;
        elseif (job_item.info.job_type == DeployServer.JobType.SENDVIRTUALKEY)
        	job_item._button.text = "[发送命令] "..job_item.info.job_name;
        elseif (job_item.info.job_type == DeployServer.JobType.WAITPROCSSEXIT)
        	job_item._button.text = "[等待进程退出] "..job_item.info.job_name;
        elseif (job_item.info.job_type == DeployServer.JobType.CREATEPROCESS)
        	job_item._button.text = "[创建进程] "..job_item.info.job_name;
        elseif (job_item.info.job_type == DeployServer.JobType.KILLPROCESS)
        	job_item._button.text = "[杀死进程] "..job_item.info.job_name;
        elseif (job_item.info.job_type == DeployServer.JobType.RESHARPERREDMINE)
        	job_item._button.text = "[代码检查] "..job_item.info.job_name..":"..job_item.info.detail.r2r_resharper_sln_path;
        elseif (job_item.info.job_type == DeployServer.JobType.IGG_CHAT)
        	job_item._button.text = "[IGGChat] "..job_item.info.job_name..":"..job_item.info.detail.igg_chat_title;
        elseif (job_item.info.job_type == DeployServer.JobType.MONITORPROCESS)
        {
            var process_info = job_item.info.process_list[1];
            if (process_info == null)
                job_item._button.text = "[监视进程] "..job_item.info.job_name..":进程不存在";
            else
            {
                var content = "pid:"..process_info.process_id;
                content = content.." CPU:";
                if (process_info.cpu >= 0)
                	content = content..process_info.cpu;
                else
                    content = content.."?";
                content = content.."%  mem:";
                if (process_info.mem >= 0)
                    content = content..ALittle.Math_Floor(process_info.vmem / 1024 / 1024);
                else
                    content = content.."?";
                content = content.."MB";
                job_item._button.text = "[监视进程] "..job_item.info.job_name..":"..content;
            }
            
            if (job_item.info.detail.monitorprocess_auto_start)
            	job_item._button.text = job_item._button.text.." [自动启动]"; 	
        }

        if (this._task_item.info.status == DeployServer.TaskStatus.IDLE)
            job_item._status.text = "";
        else
        {
            if (job_item.info.status == DeployServer.JobStatus.WAITING)
                job_item._status.text = "-";
            elseif (job_item.info.status == DeployServer.JobStatus.DOING)
                job_item._status.text = ALittle.Math_Floor(job_item.info.progress * 10000) / 100.."%";
            elseif (job_item.info.status == DeployServer.JobStatus.COMPLETED)
                job_item._status.text = "完成";
            elseif (job_item.info.status == DeployServer.JobStatus.FAILED)
                job_item._status.text = "失败";
        }
    }

    private fun HandleJobRButtonDown(ALittle.UIRButtonDownEvent event)
    {
        var job_item = cast<JobItemInfo>(event.target._user_data);
        var job_index = this._job_list.GetChildIndex(job_item.item);

        var menu = new AUIPlugin.AUIRightMenu();
        menu.AddItem("修改", bind(this.HandleModifyJob, this, job_item, job_index));
        menu.AddItem("上移", bind(this.HandleMoveJob, this, job_item, job_index, job_index - 1));
        menu.AddItem("下移", bind(this.HandleMoveJob, this, job_item, job_index, job_index + 1));
        menu.AddItem("复制", bind(this.HandleCopyJob, this, job_item, job_index));
        menu.AddItem("新建", bind(this.ShowCreateMenu, this, job_index + 1));
        menu.AddItem("删除", bind(this.HandleDeleteJob, this, job_item, job_index));
        menu.Show();
    }

    private fun HandleBuildRButtonDown(ALittle.UIRButtonDownEvent event)
    {
        var build_item = cast<BuildItemInfo>(event.target._user_data);
        
        var menu = new AUIPlugin.AUIRightMenu();
        menu.AddItem("删除", bind(this.HandleDeleteBuild, this, build_item));
        menu.Show();
    }

    private async fun HandlePreSeeBuild(ALittle.UIChangedEvent event)
    {
        var build_item = cast<BuildItemInfo>(event.target._user_data);
        var build_index = this._build_list.GetChildIndex(build_item.item);

        g_DPLCenter.center.task_center._build_edit.text = "";

        var msg = new DeployServer.QPreSeeBuild();
        msg.task_id = this._task_item.info.task_id;
        msg.create_time = build_item.info.create_time;
        msg.create_index = build_item.info.create_index;
        var sender = g_DPLCenter.CreateHttpSender();
        var error, rsp = DeployServer.HandlePreSeeBuild(sender, msg);
        if (error != null)
        {
            g_AUITool.ShowNotice("提示", error);
            return;
        }

        g_DPLCenter.center.task_center._build_edit.text = ALittle.String_Join(rsp.log_list, "\r\n");
    }

    private async fun HandleDownloadBuild(ALittle.UISystemSelectDirectoryEvent event)
    {
        if (event.path == null || event.path == "") return;

        var build_item = cast<BuildItemInfo>(event.target._user_data);
        var build_index = this._build_list.GetChildIndex(build_item.item);
        
        var msg = new DeployServer.QDownloadBuild();
        msg.task_id = this._task_item.info.task_id;
        msg.create_time = build_item.info.create_time;
        msg.create_index = build_item.info.create_index;

        var sender = g_DPLCenter.CreateHttpFileSender(event.path.."/"..ALittle.Time_GetCurDate(build_item.info.create_time)..".log");
        var error = DeployServer.HandleDownloadBuild(sender, msg);
        if (error != null) g_AUITool.ShowNotice("提示", error);
    }

    private fun HandleModifyJob(JobItemInfo info, int index)
    {
        var ui:string = null;

        if (info.info.job_type == DeployServer.JobType.BATCH)
            ui = "batch_job_dialog";
        elseif (info.info.job_type == DeployServer.JobType.DEEPCOPY)
            ui = "deepcopy_job_dialog";
        elseif (info.info.job_type == DeployServer.JobType.COPYFILE)
            ui = "copyfile_job_dialog";
        elseif (info.info.job_type == DeployServer.JobType.SENDVIRTUALKEY)
            ui = "sendvirtualkey_job_dialog";
        elseif (info.info.job_type == DeployServer.JobType.WAITPROCSSEXIT)
            ui = "waitprocessexit_job_dialog";
        elseif (info.info.job_type == DeployServer.JobType.CREATEPROCESS)
            ui = "createprocess_job_dialog";
        elseif (info.info.job_type == DeployServer.JobType.KILLPROCESS)
            ui = "killprocess_job_dialog";
        elseif (info.info.job_type == DeployServer.JobType.RESHARPERREDMINE)
            ui = "resharper_redmine_job_dialog";
        elseif (info.info.job_type == DeployServer.JobType.IGG_CHAT)
            ui = "igg_chat_job_dialog";
        elseif (info.info.job_type == DeployServer.JobType.MONITORPROCESS)
            ui = "monitorprocess_job_dialog";

        if (ui != null)
        {
            var dialog = g_Control.CreateControl{CommonJobDialog}(ui);
            dialog.Show(this._task_item.info.task_id, index, info.info);
        }
    }

    private async fun HandleMoveJob(JobItemInfo info, int index, int new_index)
    {
        var msg_client = g_DPLWebLoginManager.msg_client;
        if (msg_client == null || !msg_client.IsConnected())
        {
            g_AUITool.ShowNotice("提示", "当前还未连接成功!");
            return;
        }

        var msg = new DeployServer.C2SMoveJob();
        msg.task_id = this._task_item.info.task_id;
        msg.job_index = index;
        msg.target_index = new_index;
        var error = DeployServer.HandleC2SMoveJob(msg_client, msg);
        if (error != null) g_AUITool.ShowNotice("提示", error);
    }

    private async fun HandleCopyJob(JobItemInfo info, int index)
    {
        var msg_client = g_DPLWebLoginManager.msg_client;
        if (msg_client == null || !msg_client.IsConnected())
        {
            g_AUITool.ShowNotice("提示", "当前还未连接成功!");
            return;
        }

        var msg = new DeployServer.C2SCopyJob();
        msg.task_id = this._task_item.info.task_id;
        msg.job_index = index;
        var error = DeployServer.HandleC2SCopyJob(msg_client, msg);
        if (error != null) g_AUITool.ShowNotice("提示", error);
    }

    private async fun HandleDeleteJob(JobItemInfo info, int index)
    {
        var msg_client = g_DPLWebLoginManager.msg_client;
        if (msg_client == null || !msg_client.IsConnected())
        {
            g_AUITool.ShowNotice("提示", "当前还未连接成功!");
            return;
        }

        var result = g_AUITool.DeleteNotice("删除", "确定要删除该任务吗?");
        if (result != AUIPlugin.AUIToolOption.YES) return;

        var msg = new DeployServer.C2SDeleteJob();
        msg.task_id = this._task_item.info.task_id;
        msg.job_index = index;
        var error = DeployServer.HandleC2SDeleteJob(msg_client, msg);
        if (error != null) g_AUITool.ShowNotice("提示", error);
    }

    private async fun HandleDeleteBuild(BuildItemInfo info)
    {
        var msg_client = g_DPLWebLoginManager.msg_client;
        if (msg_client == null || !msg_client.IsConnected())
        {
            g_AUITool.ShowNotice("提示", "当前还未连接成功!");
            return;
        }

        var result = g_AUITool.DeleteNotice("删除", "确定要删除该构建信息吗?");
        if (result != AUIPlugin.AUIToolOption.YES) return;

        var msg = new DeployServer.C2SDeleteBuild();
        msg.task_id = this._task_item.info.task_id;
        msg.create_time = info.info.create_time;
        msg.create_index = info.info.create_index;
        var error = DeployServer.HandleC2SDeleteBuild(msg_client, msg);
        if (error != null) g_AUITool.ShowNotice("提示", error);
    }
}
